#ifndef TPSA_UTILS_TEMPLATE
#define TPSA_UTILS_TEMPLATE

//#define ensure(test) assert(test)
#define ensure(test)                                                 \
do {                                                                 \
  if (0 == (test)) {                                                 \
    fprintf(stderr, "Ensure failed: %s, %s, %d at \'%s\'\n",         \
            __FILE__, __func__, __LINE__, mkstr(test));              \
    abort();                                                         \
  }                                                                  \
} while(0)                                                           \

#define mkstr(s) mkstr_(s)
#define mkstr_(s) #s


typedef unsigned int  bit_t;

static inline bit_t
bset (bit_t b, int n)
{
  return b | (1 << n);
}

static inline bit_t
bget (bit_t b, int n)
{
  return b & (1 << n);
}

static inline bit_t
bclr (bit_t b, int n)
{
  return b & ~(1 << n);
}

static inline bit_t
badd (bit_t a, bit_t b)
{
  return a | b;
}


static inline bit_t
btrunc (bit_t b, int n)
{
  return b & ((2 << n) - 1);
}

// http://stackoverflow.com/questions/757059/position-of-least-significant-bit-that-is-set
static const bit_t MultiplyDeBruijnBitPosition[32] = {
  0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,
  31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9
};
static inline bit_t
b_lowest(bit_t b) // find the number of trailing zeros in 32-bit b
{
  return b ? MultiplyDeBruijnBitPosition[((b & -b) * 0x077CB531U) >> 27] : 32;

  #if 0 // use cycle
    if (!b) return 32;
    bit_t pos = 0;
    while (!(b & 1)) {
      b >>= 1;
      ++pos;
    }
    return pos;
  #endif
}

static inline bit_t
b_highest(bit_t b)
{
  bit_t pos = 0;
  while(b >>= 1) ++pos;
  return pos;
}

static inline void
swap (const struct tpsa **a, const struct tpsa **b)
{
  const struct tpsa *tmp = *a;
  *a = *b;
  *b = tmp;
}

static inline int
imin (int a, int b)
{
  return a<b ? a : b;
}

static inline int
imax (int a, int b)
{
  return a>b ? a : b;
}

static inline int
get_num_threads()
{
#ifdef _OPENMP
  return omp_get_num_procs();
#else
  return 1;
#endif
}


#endif
