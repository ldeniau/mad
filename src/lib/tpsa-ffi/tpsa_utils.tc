#ifndef TPSA_UTILS_TEMPLATE
#define TPSA_UTILS_TEMPLATE

//#define ensure(bool_expression) assert(bool_expression)
#define stringize(s) #s
#define XSTR(s) stringize(s)
#define ensure(bool_expression)                                      \
do {                                                                 \
  if (0 == (bool_expression)) {                                      \
    fprintf(stderr, "Ensure failed: %s, %s, %d at \'%s\'\n",         \
            __FILE__, __func__, __LINE__, XSTR(bool_expression));    \
    abort();                                                         \
  }                                                                  \
} while(0);                                                          \


typedef unsigned int  bit_t;

static inline bit_t
bset (bit_t b, int n)
{
  return b | (1 << n);
}

static inline int
bget (bit_t b, int n)
{
  return b & (1 << n);
}

static inline int
bclr (bit_t b, int n)
{
  return b & ~(1 << n);
}

static inline int
badd (bit_t a, bit_t b)
{
  return a | b;
}


static inline int
btrunc (bit_t b, int n)
{
  return b & ~(-1 << (n+1));
}

static inline void
swap (const struct tpsa **a, const struct tpsa **b)
{
  const struct tpsa *tmp = *a;
  *a = *b;
  *b = tmp;
}

static inline int
imin (int a, int b)
{
  return a<b ? a : b;
}

static inline int
imax (int a, int b)
{
  return a>b ? a : b;
}

static inline int
get_num_threads()
{
#ifdef _OPENMP
  return omp_get_num_procs();
#else
  return 1;
#endif
}


#endif
