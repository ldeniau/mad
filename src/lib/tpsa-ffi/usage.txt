
Data structure
==============

Descriptor
----------

struct tpsa_desc {
  int      nmv,nv, nc,// number of map vars, number of all vars, number of coeff
           size;      // bytes used by current desc
  ord_t    mo, ko,    // maximum orders: for vars, for knobs
           trunc,     // truncation order for operations
          *a,         // alphas (max order for each var)
          *monos,     // 'matrix' storing the monomials (sorted by ord)
          *ords,      // order of each mono of To
         **To,        // Table by orders -- pointers to monos, sorted by order
         **Tv;        // Table by vars   -- pointers to monos, sorted by vars
  idx_t   *hpoly_To_idx,  // poly start in To
          *tv2to, *to2tv, // lookup tv->to, to->tv
          *H,         // indexing matrix, in Tv
         **L;         // multiplication indexes -- L[oa][ob] = lc; lc[ia][ib] = ic
};



TPSA
-------------

struct tpsa { // warning: must be kept identical to LuaJit definition
  D      *desc;
  ord_t   lo, hi, mo; // lowest/highest used ord, trunc ord
  bit_t   nz;
  num_t   coef[];
};

desc -- pointer to a shared descriptor; immutable

mo   -- memory truncation order; immutable
     -- 1 <= mo <= desc->mo
     -- coefficients are only allocated up to this polynomial, inclusive
     -- writing or reading an index from a higher order results in error

hi   -- highest homogeneous poly in use; 0 <= hi <= mo
     -- used to avoid un-necessary computation
     -- modifies according to operations performed on tpsa

lo   -- lowest homogeneous poly in use
     -- 0 <= lo <= hi; if lo > hi then TPSA is considered uninitialized

nz   -- state of non-zero homogeneous polynomials
     -- used to avoid computation on unused polynomials
     -- type: bit-array; each bit corresponds 1-to-1 to an order
     -- to be used through functions in utils: bset, bget, bclr, badd, btrunc
     -- IMPORTANT: when clearing ord 0, also set coef[0] = 0 because ord0 is not
        checked when performing computations


Constructor
===========

Descriptor
----------
a) without knobs:
D*    mad_tpsa_desc_new  (int nv, const ord_t var_ords[nv], ord_t vo)
    -- var_ords[i] <= mo

b) with knobs:
D*    mad_tpsa_desc_newk (int nv, const ord_t var_ords[nv], ord_t vo,
                          int nk, const ord_t knb_ords[nk], ord_t ko);
    -- vo in [max(var_ords), sum(var_ords)]
    -- ko in [max(knb_ords), sum(knb_ords)]
    -- vo >= ko
    -- EXCEPTIONS: var_ords= { 2, 2, 2, 2, 0, 0 }

TPSA
----
a) T* mad_tpsa_new(D *d, const ord_t mo_)
    -- allocates a TPSA for the descriptor d, with capacity for orders up to mo_
    -- if not 0 < mo_ <= d_mo then mo_ = d_mo

b) T* mad_tpsa_same(const T *t)
    -- allocates a TPSA of the same kind as t (same descriptor, same truncation order)



Operations
===========

Monomials & their indexes
-------------------------
int mad_tpsa_midx(const T *t, int n, const ord_t m[n]);
    -- get an index associated with the monomial m
    -- if n=len(m) < desc->nv then the rest of m is considered to be filled with 0s
    -- the index may not be valid for the tpsa t (i.e. may be out of range)

int mad_tpsa_midx_sp(const T *t, int n, const int   m[n]);
    -- same as midx, with m representing a sparse monomial
    -- sparse mono = an array of positive integer pairs (idx, ord)
    -- indexes in m should be sorted in increasing order

Clear / Reset
-------------
void  mad_tpsa_clear(T *t)
    -- re-initialize t; after this operation it can be considered empty
void  mad_tpsa_const(T *t, num_t v)
    -- make t the constant value v
    -- equivalent to mad_tpsa_clear(t) + mad_tpsa_set0(t,v)


Peek & Poke
-----------
A) lower level: based on index
----------------------------------

num_t mad_tpsa_geti(const T *t, int i)
    -- gets the value of the coefficient at index i
    -- returns 0 if ord(mono(i)) > t->mo

void mad_tpsa_set0(const T *t,        num_t a, num_t b)
    -- sets the coefficient C0 to value C0 = a*C0 + b
    -- semantically equivalent to mad_tpsa_seti(t,0, a,b), but may be faster

void mad_tpsa_seti(const T *t, int i, num_t a, num_t b)
    -- sets the coefficient Ci to value Ci = a*Ci + b
    -- ERROR  -- if i is outside of the range of t [ ord(mono(i)) > t->mo ]
              -- if i is outside the current truncation order [ desc->trunc ] (should be warning ?)


B) higher level: based on monomial
----------------------------------

void mad_tpsa_getm    (const T *t, int n, const ord_t m[n])
void mad_tpsa_getm_sp (const T *t, int n, const int   m[n]); // sparse mono [(i,o)]
    -- gets the value of the coefficient given by the monomial m
    -- n = lenght of monomial m
    -- if n < desc->nv then the rest of m is considered to be filled with 0s
    -- ERROR if the monomial m is outside of the range of t [ ord(m) > t->mo ]

void mad_tpsa_setm    (T *t, int n, const ord_t m[n], num_t a, num_t b)
void mad_tpsa_setm_sp (T *t, int n, const int   m[n], num_t a, num_t b);
    -- sets the coefficient C given by the monomial m to the value C = a*C + b
    -- same considerations as getm


