#ifndef TPSA_DESC_TEMPLATE
#define TPSA_DESC_TEMPLATE

#include <limits.h>

// #define TRACE
// #define DEBUG

typedef int   idx_t;

#define D     struct tpsa_desc
#define str_t const char*

enum { DESC_STACK_SIZE = 20 };
const ord_t DESC_MAX = CHAR_BIT * sizeof(bit_t);

struct tpsa_desc {
  int      id;        // WARNING: needs to be 1st field, for Lua compatibility
  int      rk, nv, nc,// number of map vars, number of all vars, number of coeff
           size;      // bytes used by current desc
  char   **var_names_;// names of map variables; TODO: move it 1 level above and set indirection
  ord_t    mo, ko,    // maximum orders: for map, for knobs
           trunc,     // truncation order for operations; always <= mo
          *a,         // tpsa alphas (max order for each monomial variable)
          *map_a,     //  map alphas (max order for each TPSA)
          *monos,     // 'matrix' storing the monomials (sorted by ord)
          *ords,      // order of each mono of To
         **To,        // Table by orders -- pointers to monos, sorted by order
         **Tv;        // Table by vars   -- pointers to monos, sorted by vars
  idx_t   *hpoly_To_idx,  // poly start in To
          *tv2to, *to2tv, // lookup tv->to, to->tv
          *H,         // indexing matrix, in Tv
         **L;         // multiplication indexes -- L[oa][ob] = lc; lc[ia][ib] = ic
  int   ***L_idx;     // L_idx[oa,ob] = [start] [split] [end] idxs in L
  ord_t  **ocs;       // ocs[t,i] = o; o will be computed on thread t; o = 3..mo; terminated with 0
  int      stack_top; // current top of stack size
  struct tpsa *t1, *t2, *t3, *t4;
  struct tpsa *stack[DESC_STACK_SIZE];
};

// --- HELPERS ----------------------------------------------------------------

static inline ord_t
min_ord2(ord_t a, ord_t b)
{
  return a<b ? a : b;
}

static inline ord_t
min_ord(ord_t a, ord_t b, ord_t c)
{
  return min_ord2(a, min_ord2(b,c));
}

static inline int
max_nc(int nv, int no)
{
  // #coeff(nv,no) = (nv+no)! / (nv!*no!)
  int max = imax(nv,no);
  long long unsigned int num = 1, den = 1;
  for (int i = max + 1; i <= nv+no; ++i) {
    num *= i;
    den *= i - max;
  }
  return num / den;
}

static inline idx_t
hpoly_idx_rect(idx_t ib, idx_t ia, int ia_size)
{
  return ib*ia_size + ia;
}


// --- MONOMIALS --------------------------------------------------------------

static inline int
desc_mono_isvalid(const D *d, int n, const ord_t m[n])
{
  assert(d && m);
  int rk = d->rk;
  return    ( n <= d->nv )
         && (         mono_order(n   ,m)    <= d->mo)
         && (n > rk ? mono_order(n-rk,m+rk) <= d->ko
                    : 1)
         && mono_leq(n,m,d->a);
}

static inline int
desc_mono_isvalid_sp(const D *d, int n, const idx_t m[n])
{
  assert(d && m);
  if (n & 1)
    return 0;
  ord_t mo = 0, ko = 0;
  for (int i = 0; i < n; i += 2) {
    int mono_idx = m[i] - 1; // translate from var idx to mono idx
    if (mono_idx >= d->nv)  return 0;

    ord_t o = m[i+1];
    if (o > d->a[mono_idx]) return 0;
    mo += o;
    if (mono_idx > d->rk)
      ko += o;
  }
  return (mo <= d->mo) && (ko <= d->ko);
}

static inline int
nxt_mono_by_var(D *d, int n, ord_t m[n], int start)
{
  assert(d && m);
  for (int i=start; i < n; ++i) {
    ++m[i];
    if (desc_mono_isvalid(d, n, m))
      return 1;
    m[i] = 0;
  }
  return 0;
}

static inline void
nxt_mono_by_unk(int n, const ord_t a[n], int i, int j, ord_t m[n])
{
  assert(a && m);
  mono_fill(n,m,0);
  for (int k=i; k < n; ++k) {
    m[k] = a[k];
    j -= a[k];
    if (j <= 0) {
      if (j < 0) m[k] += j;
      break;
    }
  }
}

static inline void
print_mono_mat(int w, int h, const ord_t t[w*h])
{
  for (int i = 0; i < imin(h,50); ++i) {
    printf("(%2d) ", i);
    mono_print(w, t + i*w);
    printf(" o=%d\n", mono_order(w, t + i*w));
  }
  if (h > 50) printf("... [ %d more rows ] ...\n", h - 50);
}

// --- TABLES -----------------------------------------------------------------

static inline void
tbl_print(int w, int h, ord_t **t)
{
  for (int i = 0; i < imin(h,50); ++i) {
    printf("(%2d) ", i);
    mono_print(w, t[i]);
    printf(" o=%d\n", mono_order(w, t[i]));
  }
  if (h > 50) printf("... [ %d more rows ] ...\n", h - 50);
}

static inline void
tbl_realloc_monos(D *d, int new_nc_)
{
  // reallocates array of monomials to fit at least new_nc_ items
  // if new_nc_ is 0, it increases the capacity of exiting array
  assert(d);

  if (!new_nc_)
    new_nc_ = d->nc * 2;
#ifdef TRACE
  printf("realloc for nc= %d\n", new_nc_);
#endif
  d->nc = new_nc_;
  d->monos = realloc(d->monos, d->nc * d->nv * sizeof *(d->monos));
  d->ords  = realloc(d->ords,  d->nc         * sizeof *(d->monos));
}

static inline idx_t  // idx to end of d->monos
make_higher_ord_monos(D *d, int curr_mono_idx, int need_realloc)
{
#ifdef TRACE
  printf("make_higher_ord_monos, cmi=%d\n", curr_mono_idx);
#endif

  // ords 2..mo
  int nv = d->nv;
  ord_t m[nv], *curr_mono = d->monos + curr_mono_idx*nv;
  idx_t *pi = d->hpoly_To_idx;
  for (ord_t o = 2; o <= d->mo; o++) {        // to build ord o:
    for   (int i = pi[ 1 ]; i < pi[2]; ++i) { // i goes through ord  1
      for (int j = pi[o-1]; j < pi[o]; ++j) { // j goes through ord (o-1)
        mono_add(nv, d->monos + i*nv, d->monos + j*nv, m);
        if (desc_mono_isvalid(d, nv, m)) {
          // ensure there is space for m
          if (need_realloc && curr_mono_idx >= d->nc) {
            tbl_realloc_monos(d,0);
            curr_mono = d->monos + nv*curr_mono_idx;
          }
          mono_copy(nv, m, curr_mono);
          d->ords[curr_mono_idx] = o;
          curr_mono_idx++;
          curr_mono += nv;
        }
        if (m[i-1] > d->a[i-1] || m[i-1] >= o)
          break;
      }
      pi[o+1] = curr_mono_idx;
    }
  }

#ifdef DEBUG
  print_mono_mat(d->nv, curr_mono_idx, d->monos);
  printf("ps={ ");
  for (int o = 0; o <= d->mo + 1; ++o)
    printf("[%d]=%d ", o, d->hpoly_To_idx[o]);
  printf("}\n");
#endif

  return curr_mono_idx;
}

static inline void
make_monos(D *d)
{
  // builds the monomials matrix in To order
#ifdef TRACE
  printf("make_monos for %p\n", (void*)d);
#endif

  assert(d && d->a);
  const int max_init_alloc = 20000;  // to fit (6,12)
  d->nc = max_nc(d->nv, d->mo);
  int nv = d->nv, need_realloc = 0;
  if (d->nc > max_init_alloc || d->nc < 0) {  // nc < 0 when overflow in max_nc
    need_realloc = 1;
    d->nc = max_init_alloc;
  }

  d->monos        = malloc(d->nc * nv  * sizeof *(d->monos));
  d->ords         = malloc(d->nc       * sizeof *(d->ords));
  d->hpoly_To_idx = malloc((d->mo + 2) * sizeof *(d->hpoly_To_idx));
  assert(d->monos);
  assert(d->ords);
  assert(d->hpoly_To_idx);

  // ord 0
  mono_fill(nv, d->monos, 0);
  d->hpoly_To_idx[0] = d->ords[0] = 0;
  int curr_mono_idx = 1;

  // ord 1
  if (d->mo >= 1) {
    d->hpoly_To_idx[1] = 1;
    mono_fill(nv*nv, d->monos+nv, 0);  // init with 0; TODO: check d->monos has nv*nv slots
    for (int i = 0; i < nv; ++i)
      if (d->a[i]) {
        d->monos[curr_mono_idx*nv + i] = 1;
        d->ords [curr_mono_idx]        = 1;
        curr_mono_idx++;
      }
    d->hpoly_To_idx[2] = curr_mono_idx;
  }

  int real_nc = curr_mono_idx;
  if (d->mo >= 2)
    real_nc = make_higher_ord_monos(d, curr_mono_idx, need_realloc);

  tbl_realloc_monos(d, real_nc);
  d->size += real_nc * d->nv * sizeof *(d->monos);
  d->size += real_nc         * sizeof *(d->ords);
  d->size += (d->mo + 2)     * sizeof *(d->hpoly_To_idx);
}

static inline int
find_index(int n, const ord_t **T, const ord_t m[n], int start, int stop)
{
  assert(T && m);
  for (int i = start; i < stop; ++i)
    if (mono_equ(n,T[i],m)) return i;

  // error
  printf("monomial not found in table: ");
  mono_print(n,m);
  assert(NULL);
  return -1;
}

enum tbl_ordering {BY_ORD, BY_VAR};

static inline int
find_index_bin(int n, const ord_t **T, const ord_t m[n], int start, int stop, enum tbl_ordering tbl_ord)
{
#ifdef DEBUG
  mono_print(n,m);
  printf(" from %d to %d\n", start, stop);
#endif

  int count = stop - start, i = 0, step = 0;
  while (count > 0) {
    step = count / 2;
    i = start + step;
    if ((tbl_ord == BY_ORD && mono_order(n,T[i]) < mono_order(n,m)) || mono_rcmp(n,T[i],m) < 0) {
      start = ++i;
      count -= step + 1;
    }
    else
      count = step;
  }
  if ( start < stop && mono_equ(n,T[start], m))
    return start;

  // error
  tbl_print(n, stop, (ord_t **)T);
  printf("monomial not found in table: "); mono_print(n,m);
  printf(" Searched by %s from %d to %d\n", tbl_ord == BY_ORD ? "order" : "variable", start, stop);
  assert(NULL);
  return -1;
}

static inline void
tbl_by_ord(D *d)
{
#ifdef TRACE
  printf("tbl_by_ord for %p\n", (void*)d);
#endif

  assert(d && d->a && d->hpoly_To_idx && d->monos);

  d->To    = malloc(d->nc * sizeof *(d->To));
  assert(d->To);
  d->size += d->nc * sizeof *(d->To);

  ord_t *monos = d->monos;
  for (int i = 0; i < d->nc; ++i, monos += d->nv)
    d->To[i] = monos;
}

static inline void
tbl_by_var(D *d)
{
#ifdef TRACE
  printf("tbl_by_var for %p\n", (void*)d);
#endif
  assert(d && d->a && d->monos && d->hpoly_To_idx);

  d->Tv    = malloc(d->nc * sizeof *(d->Tv));
  d->tv2to = malloc(d->nc * sizeof *(d->tv2to));
  d->to2tv = malloc(d->nc * sizeof *(d->to2tv));
  assert(d->Tv);
  assert(d->tv2to);
  assert(d->to2tv);
  d->size +=     d->nc * sizeof *(d->Tv);
  d->size += 2 * d->nc * sizeof *(d->tv2to);  // tv2to + to2tv

  int mi = 0, nv = d->nv;
  ord_t m[nv];
  mono_fill(nv, m, 0);
  do {
    int o = mono_order(nv, m);
    int idx = find_index_bin(nv, (const ord_t**)d->To, m,
                             d->hpoly_To_idx[o], d->hpoly_To_idx[o+1], BY_ORD);
    d->tv2to[mi]  = idx;
    d->to2tv[idx] = mi;
    d->Tv[mi]     = d->To[idx];
    ++mi;
  } while (nxt_mono_by_var(d,nv,m,0));
#ifdef DEBUG
  tbl_print(nv, mi, d->Tv);
  printf("tv2to=[ ");
  for (int i = 0; i < imin(mi,50); ++i) printf("%d ", d->tv2to[i]);
  printf("%s]\n", mi > 50 ? " ... " : "");
#endif
}

// --- H indexing matrix ------------------------------------------------------

static inline void
tbl_print_H(const D *d)
{
  assert(d && d->H);
  int cols = d->mo + 2;
  for (int i = 0; i < d->nv; ++i) {
    for (int j = 0; j < cols; ++j)
      printf("%2d ", d->H[i*cols + j]);
    printf("\n");
  }
}

static inline int
tbl_index_H(const D *d, int n, const ord_t m[n])
{
  assert(d);
  assert(n <= d->nv);
  int s = 0, I = 0, cols = d->mo + 2;
  const int *H = d->H;
  for (int i = n - 1; i >= 0; --i) {
    I += H[i*cols + s+m[i]] - H[i*cols + s];
    s += m[i];
  }
  assert(I > -1);
  return I;
}

static inline int
tbl_index_H_sp(const D *d, int n, const idx_t m[n])
{
  assert(d);
  assert(n/2 <= d->nv);
  int s = 0, I = 0, cols = d->mo + 2, idx, o;
  const int *H = d->H;
  // indexes in m should be in ascending order
  for (int i = n - 2; i >= 0; i -= 2) {
    idx = m[i] - 1;
    o = m[i+1];
    I += H[idx*cols + s+o] - H[idx*cols + s];
    s += o;
  }
  assert(I > -1);
  return I;
}

static inline idx_t
desc_get_idx(const D *d, int n, const ord_t m[n])
{
  assert(d && m);
  assert(desc_mono_isvalid(d, n, m));  // should be ensure ?
  return d->tv2to[tbl_index_H(d,n,m)];
}

static inline idx_t
desc_get_idx_sp(const D *d, int n, const idx_t m[n])
{
  assert(d && m);
  assert(desc_mono_isvalid_sp(d, n, m));
  return d->tv2to[tbl_index_H_sp(d,n,m)];
}

static inline void
tbl_clear_H(D *d)
{
#ifdef TRACE
  printf("tbl_clear_H for %p\n", (void*)d);
#endif
  int cols = d->mo + 2, accum = 0;
  for (int i = d->nv - 1; i >= 0; --i) {
    accum += d->a[i];
    for (int j = 1 + imin(accum,d->mo); j < cols; ++j)
      d->H[i*cols + j] = -1;
  }
}

static inline void
tbl_solve_H(D *d)
{
#ifdef TRACE
  printf("tbl_solve_H for %p\n", (void*)d);
#endif
  int nv = d->nv, cols = d->mo + 2, accum = d->a[nv-1];
  ord_t b[nv], *a = d->a;

  // solve system of equations
  for (int i = nv-2; i >= 1; --i) { // variables
    accum += a[i];
    for (int j = a[i]+2; j <= imin(accum,d->mo); j++) { // orders
      nxt_mono_by_unk(nv,a,i,j,b);
      if (desc_mono_isvalid(d,nv,b)) {
        idx_t idx0 = tbl_index_H(d,nv,b);
        idx_t idx1 = find_index_bin(nv,(const ord_t**)d->Tv,b,idx0,d->nc,BY_VAR);
        d->H[i*cols + j] = idx1 - idx0;
      }
      else
        d->H[i*cols + j] = 0;
    }
  }
}

static inline void
tbl_build_H(idx_t *H, int rows, int cols, ord_t a[rows], const ord_t **Tv, int nc)
{
#ifdef TRACE
  printf("tbl_build_H\n");
#endif
  // minimal constants for 1st row
  for (int j=0; j < cols; ++j)
    H[0*cols + j] = j;

  // remaining rows
  for (int i = 1; i < rows; ++i) {  // variables
    H[i*cols + 0] = 0;
    int crtPos = 1;

    // initial congruence from Tv
    for (int j = 1; j < nc; j++) { // monomials
      if (Tv[j][i] != Tv[j-1][i]) {
        H[i*cols + crtPos] = j;
        crtPos++;
        if (Tv[j][i] == 0) break;
      }
    }

    // complete row with zeros
    while(crtPos < cols) H[i*cols + crtPos] = 0, crtPos++;
  }

  // close congruence of the last var
  H[(rows-1)*cols + a[rows-1] + 1] = nc;
}

static inline void
tbl_set_H(D *d)
{
  assert(d && d->a && d->Tv && d->To);
  assert(d->nv != 0 && d->mo != 0 && d->nc != 0);
#ifdef TRACE
  printf("tbl_set_H for %p\n", (void*)d);
#endif

  d->H = malloc(d->nv * (d->mo+2) * sizeof *(d->H));
  assert(d->H);
  d->size += d->nv * (d->mo+2) * sizeof *(d->H);

  tbl_build_H(d->H, d->nv, d->mo + 2, d->a, (const ord_t**)d->Tv, d->nc);
  tbl_solve_H(d);
  tbl_clear_H(d);

#ifdef DEBUG
  printf("H = {\n");
  tbl_print_H(d);
#endif
}

// --- L indexing matrix ------------------------------------------------------

static inline void
tbl_print_LC(const idx_t *lc, int oa, int ob, int *pi)
{
  int iao = pi[oa], ibo = pi[ob], cols = pi[oa+1] - pi[oa];
  for (int ib = pi[ob]; ib < pi[ob+1]; ++ib) {
    printf("\n  ");
    for (int ia = pi[oa]; ia < pi[oa+1]; ++ia) {
      int ic = lc[hpoly_idx_rect(ib-ibo,ia-iao,cols)];
      printf("%3d ", ic);
    }
  }
  printf("\n");
}

static inline void
tbl_print_L(const D *d)
{
  int ho = d->mo / 2;
  for (int oc = 2; oc <= min_ord2(d->mo,5); ++oc)
    for (int j = 1; j <= oc/2; ++j) {
      int oa = oc - j, ob = j;
      printf("L[%d][%d] = {", ob, oa);
      tbl_print_LC(d->L[oa*ho + ob], oa, ob, d->hpoly_To_idx);
    }
  if (d->mo > 5)
    printf("Orders 5 to %d omitted...\n", d->mo);
}

static inline idx_t*
tbl_build_LC(int oa, int ob, D *d)
{
#ifdef DEBUG
  // printf("tbl_set_LC oa=%d ob=%d\n", oa, ob);
#endif
  assert(d && d->To && d->hpoly_To_idx && d->tv2to);
  assert(oa < d->mo && ob < d->mo);

  ord_t **To = d->To;
  const int *pi   = d->hpoly_To_idx,  *tv2to = d->tv2to,          // shorter names
             iao  = pi[oa],            ibo   = pi[ob],            // offsets
             cols = pi[oa+1] - pi[oa], rows  = pi[ob+1] - pi[ob]; // sizes

  int mat_size = rows * cols;
  idx_t *lc = malloc(mat_size * sizeof *lc);
  assert(lc);
  d->size += mat_size * sizeof *lc;
  for (int i = 0; i < mat_size; ++i)
    lc[i] = -1;

  ord_t m[d->nv];
  int ic, idx_lc;
  for (int ib = pi[ob]; ib < pi[ob+1]; ++ib) {
    int lim_a = oa == ob ? ib+1 : pi[oa+1];   // triangular is lower left
    for (int ia = pi[oa]; ia < lim_a; ++ia) {
      mono_add(d->nv, To[ia], To[ib], m);
      if (desc_mono_isvalid(d,d->nv,m)) {
        ic = tv2to[tbl_index_H(d,d->nv,m)];
        idx_lc = hpoly_idx_rect(ib-ibo, ia-iao, cols);
        lc[idx_lc] = ic;
#ifdef DEBUG
        /*
        printf(" ib=%d ", ib); mono_print(d->nv, To[ib]);
        printf(" ia=%d ", ia); mono_print(d->nv, To[ia]);
        printf(" ic=%d ", ic); mono_print(d->nv, m);
        printf(" ilc=%d\n", idx_lc);
        */
#endif
      }
    }
  }

  return lc;
}

static inline int**
get_LC_idxs(int oa, int ob, D *d)
{
#ifdef TRACE
  printf("get_L_idxs oa=%d ob=%d d=%p\n", oa, ob, (void*)d);
#endif
  int oc = oa + ob;
  const idx_t *pi = d->hpoly_To_idx, *lc = d->L[d->mo/2*oa + ob],
                T = (pi[oc+1] + pi[oc] - 1) / 2;  // splitting threshold of oc
  const int  cols =  pi[oa+1] - pi[oa],
             rows =  pi[ob+1] - pi[ob];

  int **LC_idx = malloc(3 * sizeof *LC_idx);
  assert(LC_idx);
  d->size += 3 * sizeof *LC_idx;

  int *limits = malloc(3 * rows * sizeof *limits); // rows: [start split end]
  assert(limits);
  d->size += 3 * rows * sizeof *limits;

  const int START = 0, SPLIT = 1, END = 2;

  LC_idx[START] = limits;
  LC_idx[SPLIT] = limits +   rows;
  LC_idx[END  ] = limits + 2*rows;

  for (int ib = 0; ib < rows; ++ib) {
    int ia;
    for (ia = 0; lc[hpoly_idx_rect(ib,ia,cols)] == -1; ++ia)
      ;  // shift ia to first valid entry
    LC_idx[START][ib] = ia;

    for (ia = oa == ob ? ib : cols-1; lc[hpoly_idx_rect(ib,ia,cols)] == -1; --ia)
      ;  // shift ia to last valid entry
    LC_idx[END  ][ib] = ia + 1;

    LC_idx[SPLIT][ib] = oa == ob ? ib+1 : cols;
    for (ia = LC_idx[START][ib]; ia < LC_idx[END][ib]; ++ia)
      if (lc[hpoly_idx_rect(ib,ia,cols)] >= T) {
        LC_idx[SPLIT][ib] = ia;
        break;
      }
  }

#ifdef DEBUG
  if (oc <= 5) {
    printf("LC_idx[%d][%d] = { [T=%d]\n", ob, oa, T);
    printf("  -->\t  //\t<--\n");
    for (int r = 0; r < rows; ++r)
      printf("  [%3d\t%3d\t%3d]\n", LC_idx[START][r],LC_idx[SPLIT][r],LC_idx[END][r]);
  }
#endif

  return LC_idx;
}

static inline void
tbl_set_L(D *d)
{
#ifdef TRACE
  printf("tbl_set_L from %p\n", (void*)d);
#endif
  ord_t o = d->mo, ho = d->mo / 2;
  int size_L = (o*ho + 1) * sizeof *(d->L);
  d->L = malloc(size_L);
  assert(d->L);
  d->size += size_L;

  int size_lci = (o*ho + 1) * sizeof *(d->L_idx);
  d->L_idx = malloc(size_lci);
  assert(d->L_idx);
  d->size += size_lci;

  memset(d->L,     0, size_L);
  memset(d->L_idx, 0, size_lci);
  // #ifdef _OPENMP
  // #pragma omp parallel for schedule(guided,1)
  // #endif
  for (int oc = 2; oc <= d->mo; ++oc)
    for (int j = 1; j <= oc / 2; ++j) {
      int oa = oc - j, ob = j;

      d->L    [oa*ho + ob] = tbl_build_LC(oa, ob, d);
      d->L_idx[oa*ho + ob] = get_LC_idxs (oa, ob, d);
    }

#ifdef DEBUG
  tbl_print_L(d);
#endif
}

// --- TABLE TEST --------------------------------------------------------------

static inline int
tbl_check_L(D *d)
{
  assert(d && d->hpoly_To_idx && d->L && d->a && d->To && d->H);
  int ho = d->mo / 2, *pi = d->hpoly_To_idx;
  ord_t m[d->nv];
  for (int oc = 2; oc <= d->mo; ++oc)
    for (int j = 1; j <= oc / 2; ++j) {
      int oa = oc - j, ob = j;
      idx_t *lc = d->L[oa*ho + ob];
      if (!lc)                                   return  1e7 + oa*1e3 + ob;

      int sa = pi[oa+1]-pi[oa], sb = pi[ob+1]-pi[ob];

      for (int ibl = 0; ibl < sb; ++ibl) {
        int lim_a = oa == ob ? ibl+1 : sa;
        for (int ial = 0; ial < lim_a; ++ial) {
          int ib = ibl + pi[ob], ia = ial + pi[oa];
          int il = hpoly_idx_rect(ibl,ial,sa);
          if (il < 0)                              return -2e7 - ia*1e5 - ib;
          if (il >= sa * sb)                       return  2e7 + ia*1e5 + ib;

          int ic = lc[il];
          if (ic >= pi[oc+1])                      return  3e7 + ic*1e5 + 11;
          if (ic >= 0 && ic < d->hpoly_To_idx[oc]) return  3e7 + ic*1e5 + 12;

          mono_add(d->nv, d->To[ia], d->To[ib], m);
          if (ic < 0 && desc_mono_isvalid(d,d->nv,m))
                                                   return -3e7          - 13;
        }
      }
    }
  return 0;
}

static inline int  // error code
tbl_check(D *d)
{
  ord_t **Tv = d->Tv, **To = d->To, *monos = d->monos, *a = d->a;
  int *tv2to = d->tv2to, *to2tv = d->to2tv, nv = d->nv, cols = d->mo + 2;
  idx_t *H = d->H;

  // check H
  for (int i = 0; i < nv; ++i)
    if (H[i*cols + 0] != 0)                   return 1e6 + i;
  for (int i = 1; i < nv; ++i)
    if (a[i] == 0) {
      for (int j = 1; j <= d->mo + 1; ++j)
        if (H[i*cols + j] != -1)              return 2e6 + i;
    }
    else if (H[i*cols + 1] != (H[(i-1)*cols + a[i-1] + 1] != -1 ?
                          H[(i-1)*cols + a[i-1] + 1] : H[(i-1)*cols + a[i-1]] + 1))
                                              return 3e6 + i;

  for (int i = 1; i < d->nc; ++i) {
    if (to2tv[tv2to[i]] != i)                 return 4e6 + i;
    if (tv2to[tbl_index_H(d,nv,To[i])] != i)  return 5e6 + i;
    if (! mono_equ(nv,To[tv2to[i]],Tv[i]))    return 6e6 + i;
    if (! mono_equ(nv,To[i],monos + nv*i))    return 7e6 + i;
  }
  return tbl_check_L(d);
}

// --- THREAD DISPATCH ---------------------------------------------------------

static inline void
get_ops(D *d, long long int ops[])
{
  int *pi = d->hpoly_To_idx;
  for (int o = 2; o <= d->mo; ++o) {
    ops[o] = 0;
    for (int j = 1; j <= (o-1)/2; ++j) {
      int oa = o-j, ob = j;            // oa > ob >= 1
      int na = pi[oa+1] - pi[oa], nb = pi[ob+1] - pi[ob];
      ops[o] += 2 * na * nb;
    }
    if (!(o & 1)) {
      int ho = o/2;
      ops[o] += (pi[ho+1]-pi[ho]) * (pi[ho+1]-pi[ho]);
    }
  }
  if (d->mo >= 12) {
    ops[d->mo]   /= 2;
    ops[d->mo+1] = ops[d->mo];
  }
}

static inline int
get_min_dispatched_idx(int nb_threads, long long int dops[])
{
  long long int min_disp = dops[nb_threads-1];
  int min_disp_idx = nb_threads - 1;
  for (int t = nb_threads-1; t >= 0; --t)
    if (dops[t] <= min_disp) {
      min_disp = dops[t];
      min_disp_idx = t;
    }
  return min_disp_idx;
}

static inline void
build_dispatch(D *d)
{
  int nb_threads = get_num_threads();
  d->ocs = malloc(nb_threads * sizeof *(d->ocs));
  assert(d->ocs);
  d->size += nb_threads * sizeof *(d->ocs);

  int sizes[nb_threads];
  for (int t = 0; t < nb_threads; ++t) {
    d->ocs[t] = calloc(d->mo, sizeof *(d->ocs[t]));
    assert(d->ocs[t]);
    d->size += d->mo * sizeof *(d->ocs[t]);
    sizes[t] = 0;
  }

  long long int ops[d->mo+1], dops[nb_threads];
  memset(dops,0,nb_threads * sizeof *dops);
  get_ops(d,ops);

  if (nb_threads == 1 || d->mo < 12) {
    for (int o = d->mo; o >= 2; --o) {
      d->ocs[0][sizes[0]++] = o;
      dops[0] += ops[o];
    }
  }
  else {
    for (int o = d->mo + 1; o >= 2; --o) {
      int idx = get_min_dispatched_idx(nb_threads,dops);
      assert(idx >= 0 && idx < nb_threads);
      d->ocs[idx][sizes[idx]++] = o;
      dops[idx] += ops[o];
    }
  }

#ifdef DEBUG
  printf("\nTHREAD DISPATCH:\n");
  for (int t = 0; t < nb_threads; ++t) {
    printf("[%d]: ", t);
    for (int i = 0; d->ocs[t][i]; ++i)
      printf("%d ", d->ocs[t][i]);
    printf("[ops:%lld] \n", dops[t]);
  }
  printf("\n");
#endif
}

// --- DESC management ---------------------------------------------------------

enum { TPSA_DESC_NUM = 100 };    // number of descriptors to store

static D  *Ds[TPSA_DESC_NUM];

static inline D*
desc_init(int rk, const ord_t map_ords[rk], str_t var_nam_[rk], int nv, const ord_t ords[nv], ord_t ko)
{
#ifdef TRACE
  printf("desc_ini rk=%d nv=%d ko=%d map_ords=",rk,nv,ko);
  mono_print(rk,map_ords);

  if (var_nam_) {
    printf(" var_names=[ ");
    for (int i = 0; i < rk; ++i) printf("%s ", var_nam_[i]);
    printf("]");
  }
  printf("\nvar_ords="); mono_print(nv,ords); printf("\n");
#endif

  assert(map_ords && ords);

  D *d = malloc(sizeof *d);
  assert(d);
  memset(d, 0, sizeof(*d));
  d->size  = sizeof(d);
  d->rk = rk;
  d->nv = nv;
  d->ko = ko;
  d->mo = d->trunc = mono_max(rk,map_ords);

  d->map_a = malloc(rk * sizeof *(d->map_a));
  assert(d->map_a);
  mono_copy(rk,map_ords,d->map_a);
  d->size += rk * sizeof *(d->map_a);

  d->a = malloc(nv * sizeof *(d->a));
  assert(d->a);
  mono_copy(nv,ords,d->a);
  d->size += nv * sizeof *(d->a);

  if (var_nam_) {
    d->var_names_ = malloc(rk * sizeof *(d->var_names_));
    assert(d->var_names_);
    d->size += rk * sizeof *(d->var_names_);

    for (int i = 0; i < rk; ++i) {
      int n = strlen(var_nam_[i]);
      d->var_names_[i] = malloc(n * sizeof *(d->var_names_[i]));
      assert(d->var_names_[i]);
      d->size += n * sizeof *(d->var_names_[i]);
      strcpy(d->var_names_[i],var_nam_[i]);
    }
  }

  return d;
}

static inline D*
desc_build(int rk, const ord_t map_ords[rk], str_t var_nam_[rk], int nv, const ord_t ords[nv], ord_t ko)
{
  assert(map_ords && ords);
  D *d = desc_init(rk,map_ords,var_nam_, nv,ords, ko);
  make_monos(d);
  tbl_by_ord(d);
  tbl_by_var(d);  // requires To
  tbl_set_H(d);
  tbl_set_L(d);
  build_dispatch(d);
  d->t1 = mad_tpsa_newd(d,d->mo);
  d->t2 = mad_tpsa_newd(d,d->mo);
  d->t3 = mad_tpsa_newd(d,d->mo);
  d->t4 = mad_tpsa_newd(d,d->mo);
  // TODO: add the size of the temps to d->size

#ifdef TRACE
  printf("nc = %d ---- Total desc size: %d bytes\n", d->nc, d->size);
#endif

  int err = tbl_check(d);
  if (err != 0) {
    // printf("\nA= ");   mono_print(d->nv, d->a);
    // printf("\nH=\n");  tbl_print_H(d);
    // printf("\nTv=\n"); tbl_print(d->nv, d->nc, d->Tv);
    // printf("\nTo=\n"); tbl_print(d->nv, d->nc, d->To);
    printf("\nCheking table consistency ... %d\n", err);
    assert(NULL);
  }

  return d;
}

static inline int
desc_equiv(const D *d, int rk, const ord_t map_ords[rk], str_t var_nam_[rk],
                       int nv, const ord_t ords[nv], ord_t ko)
{
  assert(d && map_ords && ords);
  if (var_nam_) {
    if (! d->var_names_) return 0;
    for (int i = 0; i < rk; ++i)
      if (strcmp(d->var_names_[i],var_nam_[i]) != 0) {
        printf("%s %s\n", d->var_names_[i], var_nam_[i]);
        return 0;
      }
  }
  else if (d->var_names_)
    return 0;

  return    d->rk == rk && mono_equ(rk, d->map_a, map_ords)
         && d->nv == nv && mono_equ(nv, d->a    , ords)
         && d->ko == ko;
}

static inline D*
desc_search(int rk, const ord_t map_ords[rk], str_t var_nam_[rk], int nv, const ord_t ords[nv], ord_t ko)
{
  for (int i = 0; i < TPSA_DESC_NUM; ++i) {
    if (Ds[i] && desc_equiv(Ds[i], rk,map_ords,var_nam_, nv,ords, ko))
      return Ds[i];
  }
  return NULL;
}

static inline D*
get_desc(int rk, const ord_t map_ords[rk], str_t var_nam_[rk], int nv, const ord_t ords[nv], ord_t ko)
{
  D *existing_desc = desc_search(rk,map_ords,var_nam_, nv,ords, ko);
  if (existing_desc) {
    // printf("found %d %p\n", existing_desc->id, (void*)existing_desc);
    return existing_desc;
  }

  for (int i = 0; i < TPSA_DESC_NUM; ++i)
    if (!Ds[i]) {
      Ds[i] = desc_build(rk,map_ords,var_nam_, nv,ords, ko);
      Ds[i]->id = i;
      return Ds[i];
    }
  ensure(NULL && "Too many descriptors.");
}

// --- Public Functions -------------------------------------------------------

D*
mad_tpsa_desc_new(int nv, const ord_t var_ords[nv], const ord_t map_ords_[nv], str_t var_nam_[nv])
{
  ensure(var_ords);
  ord_t mo = mono_order(nv,var_ords);
  ensure(0 < mo && mo < DESC_MAX);
  ord_t map_ords[nv];  // to parse optional param
  if (map_ords_) {
    for (int i = 0; i < nv; ++i) ensure(var_ords[i] <= map_ords_[i]);
    mono_copy(nv,map_ords_,map_ords);
  }
  else {
    mo = mono_max(nv,var_ords);
    mono_fill(nv,map_ords,mo);
  }

  return get_desc(nv,map_ords,var_nam_, nv,var_ords, 0);
}

D*
mad_tpsa_desc_newk(int nv, const ord_t var_ords[nv], const ord_t map_ords_[nv], str_t var_nam_[nv],
                   int nk, const ord_t knb_ords[nk], ord_t dk)
{
  // input validation
  ensure(nv && var_ords);
  ensure(nk && knb_ords);
  ensure( 0 <  mono_order(nv,var_ords));  // TODO: allow mo == 0
  ensure(dk <= mono_order(nk,knb_ords));
  ensure((mono_order(nv,var_ords) + mono_order(nk,knb_ords)) < DESC_MAX);

  ord_t map_ords[nv];  // to parse optional param
  if (map_ords_){
    for (int i = 0; i < nv; ++i) ensure(var_ords[i] <= map_ords_[i]);
    mono_copy(nv,map_ords_,map_ords);
  }
  else {
    ord_t mo = mono_max(nv,var_ords);
    mono_fill(nv,map_ords,mo);
  }
  if (dk == 0)
    dk = mono_max(nk,knb_ords);

  ord_t ords[nv+nk];
  int oidx = 0;
  for (int i = 0; i < nv; ++i) ords[oidx++] = var_ords[i];
  for (int i = 0; i < nk; ++i) ords[oidx++] = knb_ords[i];
  return get_desc(nv,map_ords,var_nam_, nv+nk,ords, dk);
}

void
mad_tpsa_desc_del(D *d)
{
  assert(d);
  free(d->a);
  free(d->map_a);
  free(d->monos);
  free(d->ords);
  free(d->To);
  free(d->Tv);
  free(d->hpoly_To_idx);
  free(d->tv2to);
  free(d->to2tv);
  free(d->H);

  if (d->var_names_) {
    for (int i = 0; i < d->rk; ++i)
      free(d->var_names_[i]);
    free(d->var_names_);
  }

  if (d->L) {  // if L exists, then L_idx exists too
    for (int i = 0; i < 1 + d->mo * d->mo/2; ++i) {
      free(d->L   [i]);
      // printf("here %d\n", i);
      if (d->L_idx[i]) {
        free(d->L_idx[i][0]);  // allocated as single block
        free(d->L_idx[i]);
      }
    }
    free(d->L);
    free(d->L_idx);
  }

  if (d->ocs) {
    for (int t = 0; t < get_num_threads(); ++t)
      free(d->ocs[t]);
    free(d->ocs);
  }

  mad_tpsa_del(d->t1); mad_tpsa_del(d->t2);
  mad_tpsa_del(d->t3); mad_tpsa_del(d->t4);

  // remove descriptor from global array
  Ds[d->id] = NULL;
  free(d);
}


#undef D
#undef TRACE
#undef DEBUG

#endif  // TPSA_DESC_TEMPLATE
